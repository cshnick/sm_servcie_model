diff --git a/src/examples/exampledatabase.cpp b/src/examples/exampledatabase.cpp
index 53770d6..479ca24 100644
--- a/src/examples/exampledatabase.cpp
+++ b/src/examples/exampledatabase.cpp
@@ -352,152 +352,7 @@ template <> litesql::DataSource<example::Office> EmployeeOfficeRelation::get(con
     sel.where(srcExpr);
     return DataSource<example::Office>(db, example::Office::Id.in(sel) && expr);
 }
-const litesql::FieldType user::Own::Id("id_",A_field_type_integer,"user_");
-const std::string user::type__("user");
-const std::string user::table__("user_");
-const std::string user::sequence__("user_seq");
-const litesql::FieldType user::Id("id_",A_field_type_integer,table__);
-const litesql::FieldType user::Type("type_",A_field_type_string,table__);
-const litesql::FieldType user::Name("name_",A_field_type_string,table__);
-const litesql::FieldType user::Passwd("passwd_",A_field_type_string,table__);
-void user::initValues() {
-}
-void user::defaults() {
-    id = 0;
-}
-user::user(const litesql::Database& db)
-     : litesql::Persistent(db), id(Id), type(Type), name(Name), passwd(Passwd) {
-    defaults();
-}
-user::user(const litesql::Database& db, const litesql::Record& rec)
-     : litesql::Persistent(db, rec), id(Id), type(Type), name(Name), passwd(Passwd) {
-    defaults();
-    size_t size = (rec.size() > 4) ? 4 : rec.size();
-    switch(size) {
-    case 4: passwd = convert<const std::string&, std::string>(rec[3]);
-        passwd.setModified(false);
-    case 3: name = convert<const std::string&, std::string>(rec[2]);
-        name.setModified(false);
-    case 2: type = convert<const std::string&, std::string>(rec[1]);
-        type.setModified(false);
-    case 1: id = convert<const std::string&, int>(rec[0]);
-        id.setModified(false);
-    }
-}
-user::user(const user& obj)
-     : litesql::Persistent(obj), id(obj.id), type(obj.type), name(obj.name), passwd(obj.passwd) {
-}
-const user& user::operator=(const user& obj) {
-    if (this != &obj) {
-        id = obj.id;
-        type = obj.type;
-        name = obj.name;
-        passwd = obj.passwd;
-    }
-    litesql::Persistent::operator=(obj);
-    return *this;
-}
-std::string user::insert(litesql::Record& tables, litesql::Records& fieldRecs, litesql::Records& valueRecs) {
-    tables.push_back(table__);
-    litesql::Record fields;
-    litesql::Record values;
-    fields.push_back(id.name());
-    values.push_back(id);
-    id.setModified(false);
-    fields.push_back(type.name());
-    values.push_back(type);
-    type.setModified(false);
-    fields.push_back(name.name());
-    values.push_back(name);
-    name.setModified(false);
-    fields.push_back(passwd.name());
-    values.push_back(passwd);
-    passwd.setModified(false);
-    fieldRecs.push_back(fields);
-    valueRecs.push_back(values);
-    return litesql::Persistent::insert(tables, fieldRecs, valueRecs, sequence__);
-}
-void user::create() {
-    litesql::Record tables;
-    litesql::Records fieldRecs;
-    litesql::Records valueRecs;
-    type = type__;
-    std::string newID = insert(tables, fieldRecs, valueRecs);
-    if (id == 0)
-        id = newID;
-}
-void user::addUpdates(Updates& updates) {
-    prepareUpdate(updates, table__);
-    updateField(updates, table__, id);
-    updateField(updates, table__, type);
-    updateField(updates, table__, name);
-    updateField(updates, table__, passwd);
-}
-void user::addIDUpdates(Updates& updates) {
-}
-void user::getFieldTypes(std::vector<litesql::FieldType>& ftypes) {
-    ftypes.push_back(Id);
-    ftypes.push_back(Type);
-    ftypes.push_back(Name);
-    ftypes.push_back(Passwd);
-}
-void user::delRecord() {
-    deleteFromTable(table__, id);
-}
-void user::delRelations() {
-}
-void user::update() {
-    if (!inDatabase) {
-        create();
-        return;
-    }
-    Updates updates;
-    addUpdates(updates);
-    if (id != oldKey) {
-        if (!typeIsCorrect()) 
-            upcastCopy()->addIDUpdates(updates);
-    }
-    litesql::Persistent::update(updates);
-    oldKey = id;
-}
-void user::del() {
-    if (!typeIsCorrect()) {
-        std::auto_ptr<user> p(upcastCopy());
-        p->delRelations();
-        p->onDelete();
-        p->delRecord();
-    } else {
-        delRelations();
-        onDelete();
-        delRecord();
-    }
-    inDatabase = false;
-}
-bool user::typeIsCorrect() const {
-    return type == type__;
-}
-std::auto_ptr<user> user::upcast() const {
-    return auto_ptr<user>(new user(*this));
-}
-std::auto_ptr<user> user::upcastCopy() const {
-    user* np = new user(*this);
-    np->id = id;
-    np->type = type;
-    np->name = name;
-    np->passwd = passwd;
-    np->inDatabase = inDatabase;
-    return auto_ptr<user>(np);
-}
-std::ostream & operator<<(std::ostream& os, user o) {
-    os << "-------------------------------------" << std::endl;
-    os << o.id.name() << " = " << o.id << std::endl;
-    os << o.type.name() << " = " << o.type << std::endl;
-    os << o.name.name() << " = " << o.name << std::endl;
-    os << o.passwd.name() << " = " << o.passwd << std::endl;
-    os << "-------------------------------------" << std::endl;
-    return os;
-}
-const litesql::FieldType Person::Own::Id("id_",A_field_type_integer,"Person_");
+const litesql::FieldType Person::Own::Id("id_",A_field_type_integer,"Person");
 const int Person::SexType::Male(0);
 const int Person::SexType::Female(1);
 Person::SexType::SexType(const std::string& n, AT_field_type t, const std::string& tbl, const litesql::FieldType::Values& vals)
@@ -596,7 +451,7 @@ litesql::DataSource<RoleRelation::Row> Person::RolesHandle::getRows(const litesq
     return RoleRelation::getRows(owner->getDatabase(), expr && (RoleRelation::Person == owner->id));
 }
 const std::string Person::type__("Person");
-const std::string Person::table__("Person_");
+const std::string Person::table__("Person");
 const std::string Person::sequence__("Person_seq");
 const litesql::FieldType Person::Id("id_",A_field_type_integer,table__);
 const litesql::FieldType Person::Type("type_",A_field_type_string,table__);
@@ -737,11 +592,11 @@ void Person::delRecord() {
     deleteFromTable(table__, id);
 }
 void Person::delRelations() {
+    PersonPersonRelationMother::del(*db, (PersonPersonRelationMother::Person1 == id) || (PersonPersonRelationMother::Person2 == id));
     PersonPersonRelationFather::del(*db, (PersonPersonRelationFather::Person1 == id) || (PersonPersonRelationFather::Person2 == id));
     PersonPersonRelationSiblings::del(*db, (PersonPersonRelationSiblings::Person1 == id) || (PersonPersonRelationSiblings::Person2 == id));
     PersonPersonRelationChildren::del(*db, (PersonPersonRelationChildren::Person1 == id) || (PersonPersonRelationChildren::Person2 == id));
     RoleRelation::del(*db, (RoleRelation::Person == id));
-    PersonPersonRelationMother::del(*db, (PersonPersonRelationMother::Person1 == id) || (PersonPersonRelationMother::Person2 == id));
 }
 void Person::update() {
     if (!inDatabase) {
@@ -800,7 +655,7 @@ std::ostream & operator<<(std::ostream& os, Person o) {
     os << "-------------------------------------" << std::endl;
     return os;
 }
-const litesql::FieldType Role::Own::Id("id_",A_field_type_integer,"Role_");
+const litesql::FieldType Role::Own::Id("id_",A_field_type_integer,"Role");
 Role::PersonHandle::PersonHandle(const Role& owner)
          : litesql::RelationHandle<Role>(owner) {
 }
@@ -820,7 +675,7 @@ litesql::DataSource<RoleRelation::Row> Role::PersonHandle::getRows(const litesql
     return RoleRelation::getRows(owner->getDatabase(), expr && (RoleRelation::Role == owner->id));
 }
 const std::string Role::type__("Role");
-const std::string Role::table__("Role_");
+const std::string Role::table__("Role");
 const std::string Role::sequence__("Role_seq");
 const litesql::FieldType Role::Id("id_",A_field_type_integer,table__);
 const litesql::FieldType Role::Type("type_",A_field_type_string,table__);
@@ -953,7 +808,7 @@ std::ostream & operator<<(std::ostream& os, Role o) {
     os << "-------------------------------------" << std::endl;
     return os;
 }
-const litesql::FieldType Student::Own::Id("id_",A_field_type_integer,"Student_");
+const litesql::FieldType Student::Own::Id("id_",A_field_type_integer,"Student");
 Student::SchoolHandle::SchoolHandle(const Student& owner)
          : litesql::RelationHandle<Student>(owner) {
 }
@@ -973,7 +828,7 @@ litesql::DataSource<SchoolStudentRelation::Row> Student::SchoolHandle::getRows(c
     return SchoolStudentRelation::getRows(owner->getDatabase(), expr && (SchoolStudentRelation::Student == owner->id));
 }
 const std::string Student::type__("Student");
-const std::string Student::table__("Student_");
+const std::string Student::table__("Student");
 Student::Student(const litesql::Database& db)
      : Role(db) {
 }
@@ -1074,7 +929,7 @@ std::ostream & operator<<(std::ostream& os, Student o) {
     os << "-------------------------------------" << std::endl;
     return os;
 }
-const litesql::FieldType Employee::Own::Id("id_",A_field_type_integer,"Employee_");
+const litesql::FieldType Employee::Own::Id("id_",A_field_type_integer,"Employee");
 Employee::OfficeHandle::OfficeHandle(const Employee& owner)
          : litesql::RelationHandle<Employee>(owner) {
 }
@@ -1094,7 +949,7 @@ litesql::DataSource<EmployeeOfficeRelation::Row> Employee::OfficeHandle::getRows
     return EmployeeOfficeRelation::getRows(owner->getDatabase(), expr && (EmployeeOfficeRelation::Employee == owner->id));
 }
 const std::string Employee::type__("Employee");
-const std::string Employee::table__("Employee_");
+const std::string Employee::table__("Employee");
 Employee::Employee(const litesql::Database& db)
      : Role(db) {
 }
@@ -1195,7 +1050,7 @@ std::ostream & operator<<(std::ostream& os, Employee o) {
     os << "-------------------------------------" << std::endl;
     return os;
 }
-const litesql::FieldType School::Own::Id("id_",A_field_type_integer,"School_");
+const litesql::FieldType School::Own::Id("id_",A_field_type_integer,"School");
 School::StudentsHandle::StudentsHandle(const School& owner)
          : litesql::RelationHandle<School>(owner) {
 }
@@ -1215,7 +1070,7 @@ litesql::DataSource<SchoolStudentRelation::Row> School::StudentsHandle::getRows(
     return SchoolStudentRelation::getRows(owner->getDatabase(), expr && (SchoolStudentRelation::School == owner->id));
 }
 const std::string School::type__("School");
-const std::string School::table__("School_");
+const std::string School::table__("School");
 const std::string School::sequence__("School_seq");
 const litesql::FieldType School::Id("id_",A_field_type_integer,table__);
 const litesql::FieldType School::Type("type_",A_field_type_string,table__);
@@ -1351,7 +1206,7 @@ std::ostream & operator<<(std::ostream& os, School o) {
     os << "-------------------------------------" << std::endl;
     return os;
 }
-const litesql::FieldType Office::Own::Id("id_",A_field_type_integer,"Office_");
+const litesql::FieldType Office::Own::Id("id_",A_field_type_integer,"Office");
 Office::EmployeesHandle::EmployeesHandle(const Office& owner)
          : litesql::RelationHandle<Office>(owner) {
 }
@@ -1371,7 +1226,7 @@ litesql::DataSource<EmployeeOfficeRelation::Row> Office::EmployeesHandle::getRow
     return EmployeeOfficeRelation::getRows(owner->getDatabase(), expr && (EmployeeOfficeRelation::Office == owner->id));
 }
 const std::string Office::type__("Office");
-const std::string Office::table__("Office_");
+const std::string Office::table__("Office");
 const std::string Office::sequence__("Office_seq");
 const litesql::FieldType Office::Id("id_",A_field_type_integer,table__);
 const litesql::FieldType Office::Type("type_",A_field_type_string,table__);
@@ -1496,9 +1351,9 @@ std::ostream & operator<<(std::ostream& os, Office o) {
     os << "-------------------------------------" << std::endl;
     return os;
 }
-const litesql::FieldType ThingWithMethods::Own::Id("id_",A_field_type_integer,"ThingWithMethods_");
+const litesql::FieldType ThingWithMethods::Own::Id("id_",A_field_type_integer,"ThingWithMethods");
 const std::string ThingWithMethods::type__("ThingWithMethods");
-const std::string ThingWithMethods::table__("ThingWithMethods_");
+const std::string ThingWithMethods::table__("ThingWithMethods");
 const std::string ThingWithMethods::sequence__("ThingWithMethods_seq");
 const litesql::FieldType ThingWithMethods::Id("id_",A_field_type_integer,table__);
 const litesql::FieldType ThingWithMethods::Type("type_",A_field_type_string,table__);
@@ -1629,56 +1484,53 @@ std::vector<litesql::Database::SchemaItem> ExampleDatabase::getSchema() const {
     string rowIdType = backend->getRowIDType();
     res.push_back(Database::SchemaItem("schema_","table","CREATE TABLE schema_ (name_ "+TEXT+", type_ "+TEXT+", sql_ "+TEXT+")"));
     if (backend->supportsSequences()) {
-        res.push_back(Database::SchemaItem("user_seq","sequence",backend->getCreateSequenceSQL("user_seq")));
         res.push_back(Database::SchemaItem("Person_seq","sequence",backend->getCreateSequenceSQL("Person_seq")));
         res.push_back(Database::SchemaItem("Role_seq","sequence",backend->getCreateSequenceSQL("Role_seq")));
         res.push_back(Database::SchemaItem("School_seq","sequence",backend->getCreateSequenceSQL("School_seq")));
         res.push_back(Database::SchemaItem("Office_seq","sequence",backend->getCreateSequenceSQL("Office_seq")));
         res.push_back(Database::SchemaItem("ThingWithMethods_seq","sequence",backend->getCreateSequenceSQL("ThingWithMethods_seq")));
     }
-    res.push_back(Database::SchemaItem("user_","table","CREATE TABLE user_ (id_ " + rowIdType + ",type_ " + backend->getSQLType(A_field_type_string,"") + "" +",name_ " + backend->getSQLType(A_field_type_string,"256") + "" +",passwd_ " + backend->getSQLType(A_field_type_string,"") + "" +")"));
-    res.push_back(Database::SchemaItem("Person_","table","CREATE TABLE Person_ (id_ " + rowIdType + ",type_ " + backend->getSQLType(A_field_type_string,"") + "" +",name_ " + backend->getSQLType(A_field_type_string,"256") + "" +",age_ " + backend->getSQLType(A_field_type_integer,"") + "" +",image_ " + backend->getSQLType(A_field_type_blob,"") + "" +",aDoubleValue_ " + backend->getSQLType(A_field_type_double,"") + "" +",sex_ " + backend->getSQLType(A_field_type_integer,"") + "" +")"));
-    res.push_back(Database::SchemaItem("Role_","table","CREATE TABLE Role_ (id_ " + rowIdType + ",type_ " + backend->getSQLType(A_field_type_string,"") + "" +")"));
-    res.push_back(Database::SchemaItem("Student_","table","CREATE TABLE Student_ (id_ " + rowIdType + ")"));
-    res.push_back(Database::SchemaItem("Employee_","table","CREATE TABLE Employee_ (id_ " + rowIdType + ")"));
-    res.push_back(Database::SchemaItem("School_","table","CREATE TABLE School_ (id_ " + rowIdType + ",type_ " + backend->getSQLType(A_field_type_string,"") + "" +",name_ " + backend->getSQLType(A_field_type_string,"512") + "" +")"));
-    res.push_back(Database::SchemaItem("Office_","table","CREATE TABLE Office_ (id_ " + rowIdType + ",type_ " + backend->getSQLType(A_field_type_string,"") + "" +")"));
-    res.push_back(Database::SchemaItem("ThingWithMethods_","table","CREATE TABLE ThingWithMethods_ (id_ " + rowIdType + ",type_ " + backend->getSQLType(A_field_type_string,"") + "" +")"));
-    res.push_back(Database::SchemaItem("Person_Person_Mother","table","CREATE TABLE Person_Person_Mother (Person1_ " + backend->getSQLType(A_field_type_integer,"") + " UNIQUE" +",Person2_ " + backend->getSQLType(A_field_type_integer,"") + "" +")"));
-    res.push_back(Database::SchemaItem("Person_Person_Father","table","CREATE TABLE Person_Person_Father (Person1_ " + backend->getSQLType(A_field_type_integer,"") + " UNIQUE" +",Person2_ " + backend->getSQLType(A_field_type_integer,"") + "" +")"));
-    res.push_back(Database::SchemaItem("Person_Person_Siblings","table","CREATE TABLE Person_Person_Siblings (Person1_ " + backend->getSQLType(A_field_type_integer,"") + "" +",Person2_ " + backend->getSQLType(A_field_type_integer,"") + "" +")"));
-    res.push_back(Database::SchemaItem("Person_Person_Children","table","CREATE TABLE Person_Person_Children (Person1_ " + backend->getSQLType(A_field_type_integer,"") + "" +",Person2_ " + backend->getSQLType(A_field_type_integer,"") + "" +")"));
-    res.push_back(Database::SchemaItem("Person_Role_Roles","table","CREATE TABLE Person_Role_Roles (Person1_ " + backend->getSQLType(A_field_type_integer,"") + "" +",Role2_ " + backend->getSQLType(A_field_type_integer,"") + " UNIQUE" +")"));
-    res.push_back(Database::SchemaItem("School_Student_","table","CREATE TABLE School_Student_ (School1_ " + backend->getSQLType(A_field_type_integer,"") + "" +",Student2_ " + backend->getSQLType(A_field_type_integer,"") + " UNIQUE" +")"));
-    res.push_back(Database::SchemaItem("Employee_Office_","table","CREATE TABLE Employee_Office_ (Employee1_ " + backend->getSQLType(A_field_type_integer,"") + "" +",Office2_ " + backend->getSQLType(A_field_type_integer,"") + "" +")"));
-    res.push_back(Database::SchemaItem("user_id_idx","index","CREATE INDEX user_id_idx ON user_ (id_)"));
-    res.push_back(Database::SchemaItem("Person_id_idx","index","CREATE INDEX Person_id_idx ON Person_ (id_)"));
-    res.push_back(Database::SchemaItem("Person__name_age_idx","index","CREATE UNIQUE INDEX Person__name_age_idx ON Person_ (name_,age_)"));
-    res.push_back(Database::SchemaItem("Role_id_idx","index","CREATE INDEX Role_id_idx ON Role_ (id_)"));
-    res.push_back(Database::SchemaItem("School_id_idx","index","CREATE INDEX School_id_idx ON School_ (id_)"));
-    res.push_back(Database::SchemaItem("Office_id_idx","index","CREATE INDEX Office_id_idx ON Office_ (id_)"));
-    res.push_back(Database::SchemaItem("ThingWithMethods_id_idx","index","CREATE INDEX ThingWithMethods_id_idx ON ThingWithMethods_ (id_)"));
-    res.push_back(Database::SchemaItem("Oee4eb2b8f280ef74d4d9b000ad762","index","CREATE INDEX Oee4eb2b8f280ef74d4d9b000ad762 ON Person_Person_Mother (Person1_)"));
-    res.push_back(Database::SchemaItem("O534e82725f31f0ed55507bb93876f","index","CREATE INDEX O534e82725f31f0ed55507bb93876f ON Person_Person_Mother (Person2_)"));
-    res.push_back(Database::SchemaItem("Person_Person_Mother_all_idx","index","CREATE INDEX Person_Person_Mother_all_idx ON Person_Person_Mother (Person1_,Person2_)"));
-    res.push_back(Database::SchemaItem("O015cdc2a9b96a2fe227389cb205e1","index","CREATE INDEX O015cdc2a9b96a2fe227389cb205e1 ON Person_Person_Father (Person1_)"));
-    res.push_back(Database::SchemaItem("Ob6198f9bf01ff852985e22535b63c","index","CREATE INDEX Ob6198f9bf01ff852985e22535b63c ON Person_Person_Father (Person2_)"));
-    res.push_back(Database::SchemaItem("Person_Person_Father_all_idx","index","CREATE INDEX Person_Person_Father_all_idx ON Person_Person_Father (Person1_,Person2_)"));
-    res.push_back(Database::SchemaItem("O83113b1dbe037a340a4b4fb558318","index","CREATE INDEX O83113b1dbe037a340a4b4fb558318 ON Person_Person_Siblings (Person1_)"));
-    res.push_back(Database::SchemaItem("Oa2ca8dcfc753ed5593154e5c78dd9","index","CREATE INDEX Oa2ca8dcfc753ed5593154e5c78dd9 ON Person_Person_Siblings (Person2_)"));
-    res.push_back(Database::SchemaItem("Person_Person_Siblings_all_idx","index","CREATE INDEX Person_Person_Siblings_all_idx ON Person_Person_Siblings (Person1_,Person2_)"));
-    res.push_back(Database::SchemaItem("O7e9a52474b6d215cf914b0521bd38","index","CREATE INDEX O7e9a52474b6d215cf914b0521bd38 ON Person_Person_Children (Person1_)"));
-    res.push_back(Database::SchemaItem("Obe20d0fd80388c3efb79c932f5d78","index","CREATE INDEX Obe20d0fd80388c3efb79c932f5d78 ON Person_Person_Children (Person2_)"));
-    res.push_back(Database::SchemaItem("Person_Person_Children_all_idx","index","CREATE INDEX Person_Person_Children_all_idx ON Person_Person_Children (Person1_,Person2_)"));
-    res.push_back(Database::SchemaItem("Person_Role_RolesPerson1_idx","index","CREATE INDEX Person_Role_RolesPerson1_idx ON Person_Role_Roles (Person1_)"));
-    res.push_back(Database::SchemaItem("Person_Role_RolesRole2_idx","index","CREATE INDEX Person_Role_RolesRole2_idx ON Person_Role_Roles (Role2_)"));
-    res.push_back(Database::SchemaItem("Person_Role_Roles_all_idx","index","CREATE INDEX Person_Role_Roles_all_idx ON Person_Role_Roles (Person1_,Role2_)"));
-    res.push_back(Database::SchemaItem("School_Student_School1_idx","index","CREATE INDEX School_Student_School1_idx ON School_Student_ (School1_)"));
-    res.push_back(Database::SchemaItem("School_Student_Student2_idx","index","CREATE INDEX School_Student_Student2_idx ON School_Student_ (Student2_)"));
-    res.push_back(Database::SchemaItem("School_Student__all_idx","index","CREATE INDEX School_Student__all_idx ON School_Student_ (School1_,Student2_)"));
-    res.push_back(Database::SchemaItem("Employee_Office_Employee1_idx","index","CREATE INDEX Employee_Office_Employee1_idx ON Employee_Office_ (Employee1_)"));
-    res.push_back(Database::SchemaItem("Employee_Office_Office2_idx","index","CREATE INDEX Employee_Office_Office2_idx ON Employee_Office_ (Office2_)"));
-    res.push_back(Database::SchemaItem("Employee_Office__all_idx","index","CREATE INDEX Employee_Office__all_idx ON Employee_Office_ (Employee1_,Office2_)"));
+    res.push_back(Database::SchemaItem("Person","table","CREATE TABLE Person (id " + rowIdType + ",type " + backend->getSQLType(A_field_type_string,"") + "" +",name " + backend->getSQLType(A_field_type_string,"256") + "" +",age " + backend->getSQLType(A_field_type_integer,"") + "" +",image " + backend->getSQLType(A_field_type_blob,"") + "" +",aDoubleValue " + backend->getSQLType(A_field_type_double,"") + "" +",sex " + backend->getSQLType(A_field_type_integer,"") + "" +")"));
+    res.push_back(Database::SchemaItem("Role","table","CREATE TABLE Role (id " + rowIdType + ",type " + backend->getSQLType(A_field_type_string,"") + "" +")"));
+    res.push_back(Database::SchemaItem("Student","table","CREATE TABLE Student (id " + rowIdType + ")"));
+    res.push_back(Database::SchemaItem("Employee","table","CREATE TABLE Employee (id " + rowIdType + ")"));
+    res.push_back(Database::SchemaItem("School","table","CREATE TABLE School (id " + rowIdType + ",type " + backend->getSQLType(A_field_type_string,"") + "" +",name " + backend->getSQLType(A_field_type_string,"512") + "" +")"));
+    res.push_back(Database::SchemaItem("Office","table","CREATE TABLE Office (id " + rowIdType + ",type " + backend->getSQLType(A_field_type_string,"") + "" +")"));
+    res.push_back(Database::SchemaItem("ThingWithMethods","table","CREATE TABLE ThingWithMethods (id " + rowIdType + ",type " + backend->getSQLType(A_field_type_string,"") + "" +")"));
+    res.push_back(Database::SchemaItem("Person_Person_Mother","table","CREATE TABLE Person_Person_Mother (Person1 " + backend->getSQLType(A_field_type_integer,"") + " UNIQUE" +",Person2 " + backend->getSQLType(A_field_type_integer,"") + "" +")"));
+    res.push_back(Database::SchemaItem("Person_Person_Father","table","CREATE TABLE Person_Person_Father (Person1 " + backend->getSQLType(A_field_type_integer,"") + " UNIQUE" +",Person2 " + backend->getSQLType(A_field_type_integer,"") + "" +")"));
+    res.push_back(Database::SchemaItem("Person_Person_Siblings","table","CREATE TABLE Person_Person_Siblings (Person1 " + backend->getSQLType(A_field_type_integer,"") + "" +",Person2 " + backend->getSQLType(A_field_type_integer,"") + "" +")"));
+    res.push_back(Database::SchemaItem("Person_Person_Children","table","CREATE TABLE Person_Person_Children (Person1 " + backend->getSQLType(A_field_type_integer,"") + "" +",Person2 " + backend->getSQLType(A_field_type_integer,"") + "" +")"));
+    res.push_back(Database::SchemaItem("Person_Role_Roles","table","CREATE TABLE Person_Role_Roles (Person1 " + backend->getSQLType(A_field_type_integer,"") + "" +",Role2 " + backend->getSQLType(A_field_type_integer,"") + " UNIQUE" +")"));
+    res.push_back(Database::SchemaItem("School_Student_","table","CREATE TABLE School_Student_ (School1 " + backend->getSQLType(A_field_type_integer,"") + "" +",Student2 " + backend->getSQLType(A_field_type_integer,"") + " UNIQUE" +")"));
+    res.push_back(Database::SchemaItem("Employee_Office_","table","CREATE TABLE Employee_Office_ (Employee1 " + backend->getSQLType(A_field_type_integer,"") + "" +",Office2 " + backend->getSQLType(A_field_type_integer,"") + "" +")"));
+    res.push_back(Database::SchemaItem("Personididx","index","CREATE INDEX Personididx ON Person (id)"));
+    res.push_back(Database::SchemaItem("Person_name_age_idx","index","CREATE UNIQUE INDEX Person_name_age_idx ON Person (name,age)"));
+    res.push_back(Database::SchemaItem("Roleididx","index","CREATE INDEX Roleididx ON Role (id)"));
+    res.push_back(Database::SchemaItem("Schoolididx","index","CREATE INDEX Schoolididx ON School (id)"));
+    res.push_back(Database::SchemaItem("Officeididx","index","CREATE INDEX Officeididx ON Office (id)"));
+    res.push_back(Database::SchemaItem("ThingWithMethodsididx","index","CREATE INDEX ThingWithMethodsididx ON ThingWithMethods (id)"));
+    res.push_back(Database::SchemaItem("Person_Person_MotherPerson1idx","index","CREATE INDEX Person_Person_MotherPerson1idx ON Person_Person_Mother (Person1)"));
+    res.push_back(Database::SchemaItem("Person_Person_MotherPerson2idx","index","CREATE INDEX Person_Person_MotherPerson2idx ON Person_Person_Mother (Person2)"));
+    res.push_back(Database::SchemaItem("Person_Person_Mother_all_idx","index","CREATE INDEX Person_Person_Mother_all_idx ON Person_Person_Mother (Person1,Person2)"));
+    res.push_back(Database::SchemaItem("Person_Person_FatherPerson1idx","index","CREATE INDEX Person_Person_FatherPerson1idx ON Person_Person_Father (Person1)"));
+    res.push_back(Database::SchemaItem("Person_Person_FatherPerson2idx","index","CREATE INDEX Person_Person_FatherPerson2idx ON Person_Person_Father (Person2)"));
+    res.push_back(Database::SchemaItem("Person_Person_Father_all_idx","index","CREATE INDEX Person_Person_Father_all_idx ON Person_Person_Father (Person1,Person2)"));
+    res.push_back(Database::SchemaItem("Ofc4501d1c1e9cc173fbe356a08a9d","index","CREATE INDEX Ofc4501d1c1e9cc173fbe356a08a9d ON Person_Person_Siblings (Person1)"));
+    res.push_back(Database::SchemaItem("O29908e51ecc673e39c38238d4abe5","index","CREATE INDEX O29908e51ecc673e39c38238d4abe5 ON Person_Person_Siblings (Person2)"));
+    res.push_back(Database::SchemaItem("Person_Person_Siblings_all_idx","index","CREATE INDEX Person_Person_Siblings_all_idx ON Person_Person_Siblings (Person1,Person2)"));
+    res.push_back(Database::SchemaItem("Oc77a0c252bbee950ec06bda52dd09","index","CREATE INDEX Oc77a0c252bbee950ec06bda52dd09 ON Person_Person_Children (Person1)"));
+    res.push_back(Database::SchemaItem("O64f9014350ce47b5d0f7606b127df","index","CREATE INDEX O64f9014350ce47b5d0f7606b127df ON Person_Person_Children (Person2)"));
+    res.push_back(Database::SchemaItem("Person_Person_Children_all_idx","index","CREATE INDEX Person_Person_Children_all_idx ON Person_Person_Children (Person1,Person2)"));
+    res.push_back(Database::SchemaItem("Person_Role_RolesPerson1idx","index","CREATE INDEX Person_Role_RolesPerson1idx ON Person_Role_Roles (Person1)"));
+    res.push_back(Database::SchemaItem("Person_Role_RolesRole2idx","index","CREATE INDEX Person_Role_RolesRole2idx ON Person_Role_Roles (Role2)"));
+    res.push_back(Database::SchemaItem("Person_Role_Roles_all_idx","index","CREATE INDEX Person_Role_Roles_all_idx ON Person_Role_Roles (Person1,Role2)"));
+    res.push_back(Database::SchemaItem("School_Student_School1idx","index","CREATE INDEX School_Student_School1idx ON School_Student_ (School1)"));
+    res.push_back(Database::SchemaItem("School_Student_Student2idx","index","CREATE INDEX School_Student_Student2idx ON School_Student_ (Student2)"));
+    res.push_back(Database::SchemaItem("School_Student__all_idx","index","CREATE INDEX School_Student__all_idx ON School_Student_ (School1,Student2)"));
+    res.push_back(Database::SchemaItem("Employee_Office_Employee1idx","index","CREATE INDEX Employee_Office_Employee1idx ON Employee_Office_ (Employee1)"));
+    res.push_back(Database::SchemaItem("Employee_Office_Office2idx","index","CREATE INDEX Employee_Office_Office2idx ON Employee_Office_ (Office2)"));
+    res.push_back(Database::SchemaItem("Employee_Office__all_idx","index","CREATE INDEX Employee_Office__all_idx ON Employee_Office_ (Employee1,Office2)"));
     return res;
 }
 void ExampleDatabase::initialize() {
diff --git a/src/examples/exampledatabase.hpp b/src/examples/exampledatabase.hpp
index 4e889ea..5e04049 100644
--- a/src/examples/exampledatabase.hpp
+++ b/src/examples/exampledatabase.hpp
@@ -2,7 +2,6 @@
 #define exampledatabase_hpp
 #include "litesql.hpp"
 namespace example {
-class user;
 class Person;
 class Role;
 class Student;
@@ -139,50 +138,6 @@ public:
 ;
 ;
 };
-class user : public litesql::Persistent {
-public:
-    class Own {
-    public:
-        static const litesql::FieldType Id;
-    };
-    static const std::string type__;
-    static const std::string table__;
-    static const std::string sequence__;
-    static const litesql::FieldType Id;
-    litesql::Field<int> id;
-    static const litesql::FieldType Type;
-    litesql::Field<std::string> type;
-    static const litesql::FieldType Name;
-    litesql::Field<std::string> name;
-    static const litesql::FieldType Passwd;
-    litesql::Field<std::string> passwd;
-    static void initValues();
-protected:
-    void defaults();
-public:
-    user(const litesql::Database& db);
-    user(const litesql::Database& db, const litesql::Record& rec);
-    user(const user& obj);
-    const user& operator=(const user& obj);
-    virtual void sayHello();
-protected:
-    std::string insert(litesql::Record& tables, litesql::Records& fieldRecs, litesql::Records& valueRecs);
-    void create();
-    virtual void addUpdates(Updates& updates);
-    virtual void addIDUpdates(Updates& updates);
-public:
-    static void getFieldTypes(std::vector<litesql::FieldType>& ftypes);
-protected:
-    virtual void delRecord();
-    virtual void delRelations();
-public:
-    virtual void update();
-    virtual void del();
-    virtual bool typeIsCorrect() const;
-    std::auto_ptr<user> upcast() const;
-    std::auto_ptr<user> upcastCopy() const;
-};
-std::ostream & operator<<(std::ostream& os, user o);
 class Person : public litesql::Persistent {
 public:
     class Own {
diff --git a/src/examples/graphdatabase.cpp b/src/examples/graphdatabase.cpp
index ea164bd..f0cd20b 100644
--- a/src/examples/graphdatabase.cpp
+++ b/src/examples/graphdatabase.cpp
@@ -77,7 +77,7 @@ litesql::DataSource<graph::Node> NodeNodeRelationEdges::getNode2(const litesql::
     sel.where(srcExpr);
     return DataSource<graph::Node>(db, graph::Node::Id.in(sel) && expr);
 }
-const litesql::FieldType Node::Own::Id("id_",A_field_type_integer,"Node_");
+const litesql::FieldType Node::Own::Id("id_",A_field_type_integer,"Node");
 const int Node::NodecolorType::Red(0);
 const int Node::NodecolorType::Blue(1);
 Node::NodecolorType::NodecolorType(const std::string& n, AT_field_type t, const std::string& tbl, const litesql::FieldType::Values& vals)
@@ -104,7 +104,7 @@ litesql::DataSource<NodeNodeRelationEdges::Row> Node::EdgesHandle::getRows(const
     return NodeNodeRelationEdges::getRows(owner->getDatabase(), expr && (NodeNodeRelationEdges::Node1 == owner->id));
 }
 const std::string Node::type__("Node");
-const std::string Node::table__("Node_");
+const std::string Node::table__("Node");
 const std::string Node::sequence__("Node_seq");
 const litesql::FieldType Node::Id("id_",A_field_type_integer,table__);
 const litesql::FieldType Node::Type("type_",A_field_type_string,table__);
@@ -268,12 +268,12 @@ std::vector<litesql::Database::SchemaItem> GraphDatabase::getSchema() const {
     if (backend->supportsSequences()) {
         res.push_back(Database::SchemaItem("Node_seq","sequence",backend->getCreateSequenceSQL("Node_seq")));
     }
-    res.push_back(Database::SchemaItem("Node_","table","CREATE TABLE Node_ (id_ " + rowIdType + ",type_ " + backend->getSQLType(A_field_type_string,"") + "" +",name_ " + backend->getSQLType(A_field_type_string,"512") + "" +",nodecolor_ " + backend->getSQLType(A_field_type_integer,"") + "" +")"));
-    res.push_back(Database::SchemaItem("Node_Node_Edges","table","CREATE TABLE Node_Node_Edges (Node1_ " + backend->getSQLType(A_field_type_integer,"") + "" +",Node2_ " + backend->getSQLType(A_field_type_integer,"") + "" +",color_ " + backend->getSQLType(A_field_type_integer,"") + "" +")"));
-    res.push_back(Database::SchemaItem("Node_id_idx","index","CREATE INDEX Node_id_idx ON Node_ (id_)"));
-    res.push_back(Database::SchemaItem("Node_Node_EdgesNode1_idx","index","CREATE INDEX Node_Node_EdgesNode1_idx ON Node_Node_Edges (Node1_)"));
-    res.push_back(Database::SchemaItem("Node_Node_EdgesNode2_idx","index","CREATE INDEX Node_Node_EdgesNode2_idx ON Node_Node_Edges (Node2_)"));
-    res.push_back(Database::SchemaItem("Node_Node_Edges_all_idx","index","CREATE INDEX Node_Node_Edges_all_idx ON Node_Node_Edges (Node1_,Node2_)"));
+    res.push_back(Database::SchemaItem("Node","table","CREATE TABLE Node (id " + rowIdType + ",type " + backend->getSQLType(A_field_type_string,"") + "" +",name " + backend->getSQLType(A_field_type_string,"512") + "" +",nodecolor " + backend->getSQLType(A_field_type_integer,"") + "" +")"));
+    res.push_back(Database::SchemaItem("Node_Node_Edges","table","CREATE TABLE Node_Node_Edges (Node1 " + backend->getSQLType(A_field_type_integer,"") + "" +",Node2 " + backend->getSQLType(A_field_type_integer,"") + "" +",color " + backend->getSQLType(A_field_type_integer,"") + "" +")"));
+    res.push_back(Database::SchemaItem("Nodeididx","index","CREATE INDEX Nodeididx ON Node (id)"));
+    res.push_back(Database::SchemaItem("Node_Node_EdgesNode1idx","index","CREATE INDEX Node_Node_EdgesNode1idx ON Node_Node_Edges (Node1)"));
+    res.push_back(Database::SchemaItem("Node_Node_EdgesNode2idx","index","CREATE INDEX Node_Node_EdgesNode2idx ON Node_Node_Edges (Node2)"));
+    res.push_back(Database::SchemaItem("Node_Node_Edges_all_idx","index","CREATE INDEX Node_Node_Edges_all_idx ON Node_Node_Edges (Node1,Node2)"));
     return res;
 }
 void GraphDatabase::initialize() {
diff --git a/src/generator/xmlobjects.hpp b/src/generator/xmlobjects.hpp
index 95257db..1c03104 100644
--- a/src/generator/xmlobjects.hpp
+++ b/src/generator/xmlobjects.hpp
@@ -385,7 +385,7 @@ public:
             return parentObject->getBaseObject();
     }
     string getTable() const {
-        return makeDBName(name + "_");
+        return makeDBName(name);
     }
     string getSequence() const {
         return makeDBName(name + "_seq");
@@ -411,7 +411,7 @@ public:
       typedef counted_ptr<DBField> Ptr;
       typedef std::vector<Ptr> sequence;
 
-      string name() const {return field->name +"_"; };
+      string name() const {return field->name; };
       void name(const string& fieldname) {field->name=fieldname;};
         bool primaryKey;
         Field::Ptr field;
